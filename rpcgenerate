#!/bin/env python
#   
#   Derek Benson and Stephen Michel
#   rpcgenerate takes the name of an idl file in the directory
#   it parses the idl file and then generates a stub.cpp and a proxy.cpp
#   file. The two generate files can then be compiled and run to allow
#   a client to remotely execute the function defined in the idl file
#   on a server.

import subprocess
import json
import sys
import os
import re
import traceback
from string import Template


# Takes a type and removes underscores at the front (dealing with arrays)
def normalizeType(type):
    if type[0] == '_' and type[1] == '_':
        return type[2:]
    return type

# Returns true if the type represents an array
def isArray(type):
    if type[0] == '_' and type[1] == '_':
        return True
    return False

# returns a string that declares a named variable of a specific type
def declareVar(name, type):
    if (isArray(type)):
        index = type.find('[')
        typeName = type[:index]
        brackets = type[index:]
        return "%s %s%s" % (normalizeType(typeName), name, brackets)
    return "%s %s" % (type, name)

# returns the name of the function that should be called to parse a string
# and return that type
def getParseFunc(type):
    if (isArray(type)):
        return 'parse_' + re.sub('[\[\]]+','_',normalizeType(type))
    return 'parse_' + type;

# returns the name of a function that should be called to get a base64 encoding
# of the given type
def getEncodeFunc(type):
    if (isArray(type)):
        return 'to_string64_' + re.sub('[\[\]]+','_',normalizeType(type))
    return 'to_string64_' + type;

# generates the string needed in the proxy template for the given function and
# signature
def proxyString(name, sig):
    # Python Array of all args (each is a hash with keys "name" and "type")
    args = sig["arguments"]

    # Make a string of form:  "type1 arg1, type2 arg2" for use in function sig
    argarray = [];

    for a in args:
        if isArray(a["type"]):
            index = a["type"].find('[')
            typeName = a["type"][:index]
            brackets = a["type"][index:]
            argarray.append(normalizeType(typeName) + ' ' + a["name"] + brackets)
        else:
            argarray.append(a["type"] + ' ' + a["name"])

    argstring = ", ".join(argarray)

    # declares function and an output stream
    lines = ["%s %s(%s) {" % (sig["return_type"], name, argstring)]
    lines.append('  *GRADING << "proxy: Called %s" << endl;' % name)
    lines.append('  ostringstream args;')
    lines.append('  args << " ";')
    # base64encodes each argument seperately and adds them to a space seperated stream
    for arg in args:
        lines.append('  *GRADING << "proxy: encoding argument %s" << endl;' % arg["name"])
        if isArray(arg["type"]):
            lines.append('  args << %s(%s) << " ";' % (getEncodeFunc(arg["type"]), arg["name"]))
        else:
            lines.append('  args << %s(&%s) << " ";' % (getEncodeFunc(arg["type"]), arg["name"]))
    # writes the stream to the socket
    lines.append('  string outgoing = "%s " + base64_encode(args.str());' % name)
    lines.append('  RPCPROXYSOCKET->write(outgoing.c_str(), strlen(outgoing.c_str()) + 1);')
    lines.append('  *GRADING << "proxy: sending to client - " << outgoing << endl;')
    lines.append('  c150debug->printf(C150RPCDEBUG,"proxy: %s invoked");' % name)
    # reads the response from the socket
    lines.append('  istringstream ret;')
    lines.append('  string raw = readFromStream();')
    lines.append('  ret.str(raw);')
    lines.append('  string name;')
    lines.append('  ret >> name;')
    lines.append('  if (name != "%s") {' %name)
    lines.append('    *GRADING << "proxy: Invalid response from server in %s!" << endl;' % name)
    lines.append('  }')
    # parses the return value if necessary
    if sig["return_type"] != "void":
        lines.append('  string msg;')
        lines.append('  ret >> msg;')
        lines.append('  *GRADING << "proxy: function %s returned with - " << msg << endl;' % name)
        lines.append('  %s retval;' % normalizeType(sig["return_type"]))
        lines.append('  %s(&retval, base64_decode(msg));' % getParseFunc(sig["return_type"]))
        lines.append('  return retval;')

    else:
        lines.append('  *GRADING << "Void function %s returned" << endl;' % name)
        lines.append('  return;')
    lines.append('}')

    return "\n".join(lines);

# generates the string needed in the stub template for the given function and
# signature
def stubString(name, sig):
    # Python Array of all args (each is a hash with keys "name" and "type")
    args = sig["arguments"]
    
    # declares the stub function and the inputstream to read arguments
    lines = ['void __%s(string args64) {' % name]
    lines.append('  c150debug->printf(C150RPCDEBUG, "called %s with \'%%s\'", args64.c_str());' % name)
    lines.append('  *GRADING << "stub: called __%s with base64string of " << args64 << endl;' % name)
    lines.append('  istringstream args;')
    lines.append('  string arg64;')
    lines.append('  args.str(base64_decode(args64));')
    names = []
    # generates code to read each base64 encoded string from the argument string,
    # it then parses the decoded argument into the correct memory location
    for a in args:
        names.append(a["name"])
        lines.append('  *GRADING << "stub: parsing arg - %s" << endl;' % a["name"])
        lines.append('  %s;' % declareVar(a["name"], a["type"]))
        lines.append('  args >> arg64;')
        # arrays need to be passed by value into their parse functions because
        # the compiler didn't like it other ways
        if isArray(a["type"]):
            lines.append('  %s(%s, base64_decode(arg64));' % (getParseFunc(a["type"]), a["name"]))
        else:
            lines.append('  %s(&%s, base64_decode(arg64));' % (getParseFunc(a["type"]), a["name"]))


    lines.append('  string response = "%s";' % name)
    lines.append('  c150debug->printf(C150RPCDEBUG,"stub: invoking %s()");' % name)
    # create the response string if necessary and call the function
    if sig["return_type"] == "void":
        lines.append('  %s(%s);' % (name, ", ".join(names)))
    else:
        lines.append('  %s retval = %s(%s);' % (sig["return_type"], name, ", ".join(names)))
        lines.append('  response = response + " " + %s(&retval);' % getEncodeFunc(sig["return_type"]))

    # encode and return the results of the function to the clear
    lines.append('  c150debug->printf(C150RPCDEBUG,"stub: %s() has returned");' % name)
    lines.append('  *GRADING << "stub: function %s returned. Response to client - " << response << endl;' % name)
    lines.append('  RPCSTUBSOCKET->write(response.c_str(), strlen(response.c_str()) + 1);')
    lines.append('}')

    return "\n".join(lines);


try:
    #
    #     Make sure invoked properly
    #
    if len(sys.argv) != 2:
        raise "Wrong number of arguments"

    #
    #     Make sure file exists and is readable
    #
    filename = sys.argv[1]
    if (not os.path.isfile(filename)):
        print >> sys.stderr, "Path %s does not designate a file" % filename
        raise "No file named " + filename
    if (not os.access(filename, os.R_OK)):
        print >> sys.stderr, "File %s is not readable" % filename
        raise "File " + filename + " not readable"

    with open("proxy.template.cpp") as f:
        proxytemplate = Template(f.read())

    with open("stub.template.cpp") as f:
        stubtemplate = Template(f.read())

    #
    #     Parse declarations into a Python dictionary
    #
    decls = json.loads(subprocess.check_output(["./idl_to_json", filename]))

    #
    # Loop printing each function signature
    #

    proxyfuncs = []
    stubfuncs = []
    stubconditionals = []
    utildecls = [];

    # Adds the built in function declarations
    utildecls.append("""
///////////////Built in///////////////////////////
string to_string64_string(string *val);
void parse_string(string *value, string arg);
string to_string64_int(int *val);
void parse_int(int *value, string arg);
string to_string64_float(float *val);
void parse_float(float *value, string arg);
//////////////////////////////////////////////////""")
    utilfuncs = [];
    # Adds the built in function implementations
    utilfuncs.append("""
///////////////Built in///////////////////////////
string to_string64_string(string *val) {
    return base64_encode(*val);
}
void parse_string(string *value, string arg) {
    *value = arg;
}
string to_string64_int(int *val) {
    return base64_encode(to_string(*val));
}
void parse_int(int *value, string arg) {
    *value = stoi(arg);
}
string to_string64_float(float *val) {
    return base64_encode(to_string(*val));
}

void parse_float(float *value, string arg) {
    *value = stof(arg);
}
//////////////////////////////////////////////////""")


    # loop generates all of encode and parse functions needed for each type
    for type, info in decls["types"].iteritems():
        # parse/encode functions for builtin types are in the two templates
        if info["type_of_type"] == "builtin":
            continue
        # array parse/encode functions take the array that is being operated on
        if isArray(type):
            index = type.find('[')
            typeName = type[:index]
            brackets = type[index:]
            encodeDecl = "string %s(%s val%s)" % (getEncodeFunc(type), normalizeType(typeName), brackets)
            parseDecl = "void %s(%s val%s, string argstr)" % (getParseFunc(type), normalizeType(typeName), brackets)
            # val represents how to get access members of the item passed in
            # if this parse/encode function is for an array then val is already a
            # pointer to the array
            val = "val"
        # struct parse/encode functions take a reference to the struct
        else:
            encodeDecl = "string %s(%s *val)" % (getEncodeFunc(type), type);
            parseDecl = "void %s(%s *val, string argstr)" % (getParseFunc(type), type)
            # if these functions are for a struct, val neededs to be dereferenced
            # before being accessed
            val = "(*val)"
        utildecls.append(parseDecl + ";");
        utildecls.append(encodeDecl + ";");
        # adds the shared declarations for array/struct parsing
        parseLines = [parseDecl + " {"]
        parseLines.append("  istringstream args;")
        parseLines.append("  string arg64;")
        parseLines.append("  args.str(argstr);")
        encodeLines = [encodeDecl + " {"]
        encodeLines.append("  ostringstream s;")

        # adds struct specific code
        if info["type_of_type"] == "struct":
            for member in info["members"]:
                # read base64 string in, decode it, and parse it into the struct
                parseLines.append("  args >> arg64;")
                # add member in, encode it, and write it to the output stream
                if isArray(member["type"]):
                    parseLines.append("  %s((*val).%s, base64_decode(arg64));" % (getParseFunc(member["type"]), member["name"]))
                    encodeLines.append("  s << %s(%s.%s) << ' ';" % (getEncodeFunc(member["type"]), val,  member["name"]))
                else:
                    parseLines.append("  %s(&(%s.%s), base64_decode(arg64));" % (getParseFunc(member["type"]), val, member["name"]))
                    encodeLines.append("  s << %s(&(%s.%s)) << ' ';" % (getEncodeFunc(member["type"]), val, member["name"]))
        # handles generating the encode and parse functions for an array
        else:
            parseLines.append("  for(int i=0; i < %s; i++) {" % info["element_count"])
            parseLines.append("    args >> arg64;")
            if isArray(info["member_type"]):
                parseLines.append("    %s(%s[i], base64_decode(arg64));" % (getParseFunc(info["member_type"]), val))
            else:
                parseLines.append("    %s(&(%s[i]), base64_decode(arg64));" % (getParseFunc(info["member_type"]), val))

            parseLines.append("  }")

            encodeLines.append("  for(int i=0; i < %s; i++) {" % info["element_count"])
            if isArray(info["member_type"]):
                encodeLines.append("    s << %s(%s[i]) << ' ';" % (getEncodeFunc(info["member_type"]), val))
            else:
                encodeLines.append("    s << %s(&(%s[i])) << ' ';" % (getEncodeFunc(info["member_type"]), val))
            encodeLines.append("  }")


        parseLines.append("}")
        utilfuncs.append("\n".join(parseLines))

        encodeLines.append("  return base64_encode(s.str());")
        encodeLines.append("}")
        utilfuncs.append("\n".join(encodeLines))
            
    for  name, sig in decls["functions"].iteritems():
        proxyfuncs.append(proxyString(name, sig))
        stubconditionals.append("if (!strcmp(functionNameBuffer, \"%s\"))\n __%s(args);\n" % (name, name))
        stubfuncs.append(stubString(name, sig))



    proxyFileName = filename.split(".")[0] + ".proxy.cpp"

    proxysub = dict()
    proxysub["functions"] = "\n".join(proxyfuncs)
    proxysub["idlname"] = filename
    proxysub["utildecls"] = "\n".join(utildecls);
    proxysub["utilfuncs"] = "\n".join(utilfuncs);

    with open(proxyFileName, 'w') as f:
        f.write(proxytemplate.safe_substitute(proxysub))
        f.close()


    stubFileName = filename.split(".")[0] + ".stub.cpp"

    stubsub = dict()
    stubsub["stubs"] = "\n".join(stubfuncs)
    stubsub["idlname"] = filename
    stubsub["conditionals"] = "    else ".join(stubconditionals)
    stubsub["utildecls"] = "\n".join(utildecls);
    stubsub["utilfuncs"] = "\n".join(utilfuncs);
    with open(stubFileName, 'w') as f:
        f.write(stubtemplate.safe_substitute(stubsub))
        f.close()





except Exception as e:
    traceback.print_exc()
    print >> sys.stderr, "Usage: %s <idlfilename>" % sys.argv[0]
